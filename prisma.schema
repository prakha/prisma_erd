model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String?
  profile   Profile?  @relation(fields: [profileId], references: [id])
  profileId Int?      @unique
  posts     Post[]
  groups    Group[]
  comments  Comment[]
  orders    Order[]   // New 1-m relationship
  addresses Address[] // New 1-m relationship
  cart      Cart?     // New 1-1 relationship
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Profile {
  id      Int     @id @default(autoincrement())
  bio     String?
  user    User?
  images  Image[]
  socials Social[] // New 1-m relationship
}

// New model for social media links
model Social {
  id        Int     @id @default(autoincrement())
  platform  String
  url       String
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId Int
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  content   String?
  published Boolean   @default(false)
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int
  comments  Comment[]
  tags      Tag[]
  category  Category? @relation(fields: [categoryId], references: [id]) // New m-1 relationship
  categoryId Int?
  metadata  Metadata? // New 1-1 relationship
}

// New model for post metadata
model Metadata {
  id      Int    @id @default(autoincrement())
  views   Int    @default(0)
  likes   Int    @default(0)
  post    Post   @relation(fields: [postId], references: [id])
  postId  Int    @unique
}

model Comment {
  id        Int       @id @default(autoincrement())
  text      String
  post      Post      @relation(fields: [postId], references: [id])
  postId    Int
  author    User?     @relation(fields: [authorId], references: [id])
  authorId  Int?
  replies   Reply[]   // New self-referential 1-m relationship
  parentId  Int?
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  createdAt DateTime  @default(now())
}

// New model for comment replies
model Reply {
  id        Int       @id @default(autoincrement())
  text      String
  comment   Comment   @relation(fields: [commentId], references: [id])
  commentId Int
  createdAt DateTime  @default(now())
}

model Group {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  members     User[]
  events      Event[]   // New 1-m relationship
}

// New model for group events
model Event {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  date        DateTime
  group       Group     @relation(fields: [groupId], references: [id])
  groupId     Int
  attendees   User[]    // New m-n relationship
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[]
}

model Image {
  id       Int     @id @default(autoincrement())
  url      String
  profile  Profile @relation(fields: [profileId], references: [id])
  profileId Int
}

// New e-commerce models
model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  price       Float
  categories  Category[] // New m-n relationship
  cartItems   CartItem[] // New 1-m relationship
  inventory   Inventory? // New 1-1 relationship
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  posts    Post[]
  products Product[] // New m-n relationship
}

model Cart {
  id      Int       @id @default(autoincrement())
  user    User      @relation(fields: [userId], references: [id])
  userId  Int       @unique
  items   CartItem[]
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int     @default(1)
}

model Order {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  items      OrderItem[]
  status     String    @default("pending")
  total      Float
  address    Address   @relation(fields: [addressId], references: [id])
  addressId  Int
  createdAt  DateTime  @default(now())
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Float
}

model Address {
  id      Int    @id @default(autoincrement())
  street  String
  city    String
  state   String
  zip     String
  user    User   @relation(fields: [userId], references: [id])
  userId  Int
}

model Inventory {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int     @unique
  quantity  Int     @default(0)
  location  String?
}
